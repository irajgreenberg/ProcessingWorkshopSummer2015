
void setup()
{
  color topColor = color(0, 0, 90);
  color bottomColor = color(0, 0, 0);
  float gradeFactor;
 
  size(1366, 768);
  background(topColor);
 ////NOTE GRADIENT CODE BELOW CAN BE LEFT OUT IF DESIRED
  loadPixels();
  for (int i = 0;i<pixels.length; i++)
  {
    float r= red(pixels[i]);
    float g= green(pixels[i]);
    float b= blue(pixels[i]);
 
    float r2 = red(bottomColor);
    float g2 = green(bottomColor);
    float b2 = blue(bottomColor);
 
    r = r * (pixels.length - i) / pixels.length + ((r2 * i) / pixels.length);
    g = g * (pixels.length - i) / pixels.length + ((g2 * i) / pixels.length);
    b = b * (pixels.length - i) / pixels.length + ((b2 * i) / pixels.length);
    pixels[i] = color(r, g, b);
  }
 updatePixels();
}
 
void draw()
{
 println(mouseX+ " " +mouseY);
 fill(0);
 rect(0,768,150,-550);
  fill(0);
 rect(110,220,-150,-100);
  fill(0);
 rect(76,120,-100,-40);
 fill(0);
 triangle(22,80,22,50,42,80);
 fill(0);
 rect(0,50,25,30);
 fill(0);
 rect(0,48,8,-50);
 fill(0);
 rect(0,16,25,10);
 fill(0);
 rect(180,224,120,700);
 fill(0);
 ellipse(240,220,117,117);
 fill(0);
 rect(200,138,80,80);
  fill(0);
 rect(210,110,60,60);
 fill(0);
 ellipse(240,90,60,60);
  fill(0);
 rect(238,60,5,-50);
  fill(0);
 rect(340,768,350,-400);
  fill(0);
 rect(340,368,25,-25);
  fill(0);
 rect(390,368,25,-25);
  fill(0);
 rect(440,368,25,-25);
  fill(0);
 rect(490,368,25,-25);
  fill(0);
 rect(540,368,25,-25);
   fill(0);
 rect(590,368,25,-25);
  fill(0);
 rect(640,368,25,-25);
   fill(0);
 rect(752,142,200,768);
   fill(0);
 rect(1000,768,2000,-150);
    fill(0);
 rect(1050,618,2000,-150);
     fill(0);
 rect(1100,468,2000,-150);
     fill(0);
 rect(1150,318,2000,-150);
     fill(0);
 rect(1200,168,2000,-150);
 noStroke();
 fill(255);
 ellipse(614,120,100,100);
 fill(0,0,90);
 ellipse(630,102,100,100);
 fill(255);
 ellipse(476,52,5,5);
 fill(255);
 ellipse(60,34,5,5);
 fill(255);
 ellipse(107,79,5,5);
 fill(255);
 ellipse(300,120,5,5);
  fill(255);
 ellipse(140,156,5,5);
  fill(255);
 ellipse(990,86,5,5);
  fill(255);
 ellipse(810,42,5,5);
  fill(255);
 ellipse(430,190,5,5);
  fill(255);
 ellipse(720,300,5,5);
  fill(255);
 ellipse(635,100,5,5);
  fill(255);
 ellipse(500,236,5,5);
  fill(255);
 ellipse(366,288,5,5);
  fill(255);
 ellipse(600,294,5,5);
  fill(255);
 ellipse(386,70,5,5);
  fill(255);
 ellipse(222,45,5,5);
  fill(255);
 ellipse(318,330,5,5);
  fill(255);
 ellipse(344,188,5,5);
  fill(255);
 ellipse(678,46,5,5);
  fill(255);
 ellipse(555,15,5,5);
  fill(255);
 ellipse(682,202,5,5);
  fill(255);
 ellipse(516,138,5,5);
  fill(255);
 ellipse(974,202,5,5);
  fill(255);
 ellipse(168,250,5,5);
  fill(255);
 ellipse(156,360,5,5);
  fill(255);
 ellipse(174,490,5,5);
  fill(255);
 ellipse(156,602,5,5);
  fill(255);
 ellipse(328,408,5,5);
  fill(255);
 ellipse(304,484,5,5);
  fill(255);
 ellipse(318,594,5,5);
  fill(255);
 ellipse(740,376,5,5);
  fill(255);
 ellipse(712,460,5,5);
  fill(255);
 ellipse(734,116,5,5);
  fill(255);
 ellipse(574,210,5,5);
  fill(255);
 ellipse(820,120,5,5);
  fill(255);
 ellipse(462,300,5,5);
  fill(255);
 ellipse(300,30,5,5);
  fill(255);
 ellipse(174,88,5,5);
  fill(255);
 ellipse(744,544,5,5);
  fill(255);
 ellipse(1132,62,5,5);
  fill(255);
 ellipse(1072,222,5,5);
  fill(255);
 ellipse(1184,146,5,5);
  fill(255);
 ellipse(1066,132,5,5);
  fill(255);
 ellipse(1008,292,5,5);
  fill(255);
 ellipse(1138,300,5,5);
  fill(255);
 ellipse(1060,360,5,5);
  fill(255);
 ellipse(970,386,5,5);
  fill(255);
 ellipse(1018,454,5,5);
  fill(255);
 ellipse(970,490,5,5);
  fill(255);
 ellipse(1000,570,5,5);
}
